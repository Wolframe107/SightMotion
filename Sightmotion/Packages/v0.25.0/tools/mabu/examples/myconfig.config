#
# Example build configuration.
#
# Configurations are available when they are in the same directory as
# *.mabu files or on the environment variable MABUPATH or in the
# --path=... option to mabu.
#
# Use a build configuration's extension-less filename to select it
# (e.g. "-t myconfig_gcc").
#
# Configurations provide a baseline group of settings that apply to a
# large group of projects, typically to distinguish debug vs. release builds
# (for the same-named builtin configurations), or for builds with e.g.
# different ABIs, logging-enabled builds, etc.
#
# NOTE: currently, configurations are completely self-contained versus
# builtin configs, which can break usage of components, which specialize for
# known 'blank', 'debug', and 'release' configurations only.

# Settings are presented in the likely order of likelihood in real
# configurations.  No settings are required.
#

# Specify build options that define this configuration, used by projects
# targeting the configuration.
#
OPTIONS = optimize/off debug/on

# Macro definitions for any language are specified here.
#
DEFS = \
    MYFLAG \
    STRING="string" \
    FOO=bar()

# Include paths may be exposed if, for example, the configuration uses
# alternate headers than those otherwise used by the project or components,
# or the configuration also publishes DEFS that require specific includes.
#
INCS = incs \
    . \
    $(MLSDK)\this\example\shows\syntax \
    $(MLSDK)/but/normally/USES/adds/MLSDK/includes...

# If you need to perform pre-build or post-build steps,
# write Makefile snippets using double-colon rules in
# the form:
#
# prebuild::
# postbuild::
# clean::
#
# These rules are invoked around the entire build process.
#
# EXTENSIONS = my_prebuild.mk my_postbuild.mk

# If you need to convert files to C/C++/assembly (or other formats)
# during the build, write Makefile snippets to do the conversion,
# and spell out the extension and path mapping here, so
# mabu will integrate those steps into the incremental build.
#
# SRC_EXTENSIONS = my_flex_converter.mk : .l -> generated/.c \
#                  my_bison_converter.mk : .y -> generated/.c
#                  my_bat_to_sh_converter.mk : .bat -> .sh

#
# Other allowed variables -- not recommended for use in configurations
# directly (they are better for options), but allowed.
#
# NOTE: most of these examples include specializations because they are
# nonportable, which is why DEFS, INCS, or OPTIONS should
# be your first choice.  (See specialization.mabu for more details.)
#

# flags for C/C++/assembly preprocessing
#
CPPFLAGS = -Dspecial -Ubad_macro

# flags for C or C++ compilers
#
CFLAGS.gcc,clang = -ffast-math

# flags for C++ compilers
#
CXXFLAGS.gcc,clang = -fvisibility-ms-compat

# flags for assemblers
#
ASMFLAGS.gcc,clang = -march=x64+sse+sse2+sse3 -mtune=k8
ASMFLAGS.msvc = -Zp8

# flags for linking: note these go to gcc, not "ld", for
# gcc/clang tools, so use -Wl,... if needed.
#
# (These are likely to cause trouble, being ignorant of the
# actual kind of project being built.)
#
LDFLAGS.gcc,clang = -Wl,-i
LDFLAGS.win = -subsystem:console

# flags for the archiver tool ("ar" or "lib")
#
ARFLAGS.gcc,clang = --target x86_64
ARFLAGS.msvc = -machine:i386



