#
# Example component project.
#
# Components are available when they are in the same directory as
# *.mabu files or on the environment variable MABUPATH or in the
# --path=... option to mabu.
#
# Settings are presented in the likely order of likelihood in real components.
# No settings are required.
#

# Include paths for any language are specified here.
#
INCS = incs \
    . \
    $(MLSDK)\this\example\shows\syntax \
    $(MLSDK)/but/normally/USES/adds/MLSDK/includes...

# Macro definitions for any language are specified here.
#
DEFS = \
    MYFLAG \
    STRING="string" \
    FOO=bar()

# Specify build options exposed to clients using this one.
# The need for this is unlikely in components, unless headers
# are not well-insulated against "enums always int",
# signed/unsigned chars, structure alignment flags, etc.
#
OPTIONS = standard-c/99 standard-c++/11

# object files to provide to users
#
OBJS.win = path/to/file.obj path/to/another.obj
OBJS.linux_x64 = path/to/file_x64.o

# static libs to provide to users
#
STLIBS = mylib path/to/another

# shared libs to link in
#
SHLIBS.win = ole32 winmm

# paths for finding libraries above
#
LIBPATHS = $(MLSDK)/lib local_libs/

# Components may use other components, exposing the combined
# settings to the user.
#
USES = ml_sdk OpenGL

# Programs may publish data or assets to whatever package
# USES this one.  This is of dubious utility unless
# components expect to find data files at runtime.
#
# Files are denoted as <path> to copy a path relative to this
# project into the same path in the package,
# or, as <source> ':' <target> to copy a path relative to this
# project into a different path in the package (and access
# at runtime).
#
# The lone <path> or the <target> tells how to access the file at runtime.
#
# The <source> may include wildcards or point to a directory.
#
# Wildcards support "*", "?", and "[...]" as in "glob".
# An entry "**" may be included to recursively search for matches inside directories.
#
# When using wildcard sources, the prefix of the source that does not contain
# wildcards is stripped out when constructing the full <target> path.
# E.g. "root/above/**/*.png" does not append "root/above/" to the target paths.
#
# When using directory sources, the entire <source> path is omitted from
# the full <target> path.  E.g. "/path/to/files/ : data/" does not append
# "/path/to/files/" to the target paths.
#
# The <target> must end in a slash when paired with wildcard or directory
# sources, and cannot include wildcards.
#
DATAS = local_file.txt : path/at/runtime.txt \
    path/to/local/and/runtime.png \
    path/to/local.obj : path/at/runtime.obj \
    images/*.png : target/path/ \
    images/**/*.png : target/path/ \
    directory/of/goodies/ : target/contents/ \


# If you need to perform pre-build or post-build steps,
# write Makefile snippets using double-colon rules in
# the form:
#
# prebuild::
# postbuild::
# clean::
#
# These rules are invoked around the entire build process.
#
# EXTENSIONS = my_prebuild.mk my_postbuild.mk

# If you need to convert files to C/C++/assembly (or other formats)
# during the build, write Makefile snippets to do the conversion,
# and spell out the extension and path mapping here, so
# mabu will integrate those steps into the incremental build.
#
# SRC_EXTENSIONS = my_flex_converter.mk : %.l -> generated/%.c \
#                  my_bison_converter.mk : %.y -> generated/%.c
#                  my_bat_to_sh_converter.mk : %.bat -> %.sh

# You may change the output directory for projects
# using this component this way.
#
# OUT = path/to/desired/output

#
# Other allowed variables -- not recommended for use in *.comp projects
# directly (they are better for configurations or options),
# but allowed.
#
# NOTE: most of these examples include specializations because they are
# nonportable, which is why DEFS, INCS, OPTIONS and USES/components should
# be your first choice.  (See specialization.mabu for more details.)
#

# flags for C/C++/assembly preprocessing
#
CPPFLAGS = -Dspecial -Ubad_macro

# flags for C or C++ compilers
#
CFLAGS.gcc,clang = -ffast-math

# flags for C++ compilers
#
CXXFLAGS.gcc,clang = -fvisibility-ms-compat

# flags for assemblers
#
ASMFLAGS.gcc,clang = -march=x64+sse+sse2+sse3 -mtune=k8
ASMFLAGS.msvc = -Zp8

# flags for linking: note these go to gcc, not "ld", for
# gcc/clang tools, so use -Wl,... if needed.
#
# (These are likely to cause trouble, being ignorant of the
# actual kind of project being built.)
#
LDFLAGS.gcc,clang = -Wl,-i
LDFLAGS.win = -subsystem:console




